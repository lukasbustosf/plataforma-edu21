const axios = require('axios');

console.log('üîç Diagn√≥stico de Laboratorio en Producci√≥n');
console.log('==========================================');

const PRODUCTION_URL = 'https://plataforma-edu21-production.up.railway.app';
const VERCEL_URL = 'https://plataforma-edu21.vercel.app';

// Token de desarrollo para pruebas
const demoToken = 'demo-token-teacher-550e8400-e29b-41d4-a716-446655440001';

async function testProductionEndpoints() {
  console.log('\nüì° Probando endpoints de producci√≥n...');
  
  try {
    // 1. Probar endpoint de salud del servidor
    console.log('\n1Ô∏è‚É£ Probando /health...');
    const healthResponse = await axios.get(`${PRODUCTION_URL}/health`, { timeout: 10000 });
    console.log('‚úÖ Servidor respondiendo:', healthResponse.status);
    console.log('üìä Datos:', healthResponse.data);

    // 2. Probar autenticaci√≥n
    console.log('\n2Ô∏è‚É£ Probando autenticaci√≥n...');
    const authResponse = await axios.get(`${PRODUCTION_URL}/api/auth/status`, {
      headers: { Authorization: `Bearer ${demoToken}` },
      timeout: 10000
    });
    console.log('‚úÖ Autenticaci√≥n exitosa:', authResponse.status);
    console.log('üë§ Usuario:', authResponse.data);

    // 3. Probar materiales del laboratorio
    console.log('\n3Ô∏è‚É£ Probando /api/lab/materials...');
    const materialsResponse = await axios.get(`${PRODUCTION_URL}/api/lab/materials`, {
      headers: { Authorization: `Bearer ${demoToken}` },
      timeout: 10000
    });
    console.log('‚úÖ Materiales obtenidos:', materialsResponse.status);
    console.log('üì¶ Cantidad de materiales:', materialsResponse.data.length || 'N/A');

    // 4. Probar actividades del laboratorio
    console.log('\n4Ô∏è‚É£ Probando /api/lab/activities...');
    const activitiesResponse = await axios.get(`${PRODUCTION_URL}/api/lab/activities`, {
      headers: { Authorization: `Bearer ${demoToken}` },
      timeout: 10000
    });
    console.log('‚úÖ Actividades obtenidas:', activitiesResponse.status);
    console.log('üéØ Cantidad de actividades:', activitiesResponse.data.length || 'N/A');

    // 5. Probar CORS
    console.log('\n5Ô∏è‚É£ Probando CORS...');
    const corsResponse = await axios.get(`${PRODUCTION_URL}/api/lab/activities`, {
      headers: { 
        Authorization: `Bearer ${demoToken}`,
        'Origin': VERCEL_URL
      },
      timeout: 10000
    });
    console.log('‚úÖ CORS funcionando:', corsResponse.status);

    console.log('\nüéâ Todos los endpoints funcionan correctamente en producci√≥n!');
    console.log('üîç El problema puede estar en:');
    console.log('   - Configuraci√≥n de CORS en Railway');
    console.log('   - Variables de entorno en Vercel');
    console.log('   - Configuraci√≥n de red entre Vercel y Railway');

  } catch (error) {
    console.log('\n‚ùå Error encontrado:');
    console.log('üîç Tipo de error:', error.code || 'HTTP Error');
    console.log('üìä Status:', error.response?.status);
    console.log('üìù Mensaje:', error.message);
    console.log('üîó URL:', error.config?.url);
    
    if (error.response) {
      console.log('üìÑ Respuesta del servidor:', error.response.data);
    }

    // Sugerencias de soluci√≥n
    console.log('\nüí° Posibles soluciones:');
    if (error.code === 'ECONNREFUSED' || error.code === 'ENOTFOUND') {
      console.log('   - Verificar que Railway est√© funcionando');
      console.log('   - Verificar URL de producci√≥n');
    } else if (error.response?.status === 401) {
      console.log('   - Problema de autenticaci√≥n');
      console.log('   - Verificar token de desarrollo');
    } else if (error.response?.status === 403) {
      console.log('   - Problema de CORS');
      console.log('   - Verificar configuraci√≥n de ALLOWED_ORIGINS');
    } else if (error.response?.status === 404) {
      console.log('   - Endpoint no encontrado');
      console.log('   - Verificar rutas del servidor');
    }
  }
}

async function testVercelFrontend() {
  console.log('\nüåê Probando frontend de Vercel...');
  
  try {
    const response = await axios.get(VERCEL_URL, { timeout: 10000 });
    console.log('‚úÖ Frontend de Vercel funcionando:', response.status);
  } catch (error) {
    console.log('‚ùå Error en frontend de Vercel:', error.message);
  }
}

async function checkEnvironmentVariables() {
  console.log('\nüîß Verificando variables de entorno...');
  
  const requiredVars = [
    'SUPABASE_URL',
    'SUPABASE_ANON_KEY', 
    'SUPABASE_SERVICE_ROLE_KEY',
    'JWT_SECRET',
    'NODE_ENV',
    'ALLOWED_ORIGINS'
  ];

  console.log('üìã Variables requeridas en Railway:');
  requiredVars.forEach(varName => {
    console.log(`   - ${varName}: ${process.env[varName] ? '‚úÖ Configurada' : '‚ùå Faltante'}`);
  });
}

async function main() {
  console.log('üöÄ Iniciando diagn√≥stico completo...');
  
  await testProductionEndpoints();
  await testVercelFrontend();
  await checkEnvironmentVariables();
  
  console.log('\nüìã Resumen del diagn√≥stico:');
  console.log('============================');
  console.log('1. Si todos los endpoints funcionan: problema en frontend');
  console.log('2. Si hay errores 401: problema de autenticaci√≥n');
  console.log('3. Si hay errores 403: problema de CORS');
  console.log('4. Si hay errores 404: problema de rutas');
  console.log('5. Si hay errores de conexi√≥n: problema de red');
  
  console.log('\nüîß Pr√≥ximos pasos:');
  console.log('1. Verificar configuraci√≥n de CORS en Railway');
  console.log('2. Verificar variables de entorno en Railway');
  console.log('3. Verificar configuraci√≥n de red entre Vercel y Railway');
  console.log('4. Revisar logs del servidor en Railway');
}

main().catch(console.error); 